import{Panel,PanelHeader,PanelBody,Switch,StatusPanel,Card,Range}from"../components/index.js";const sharedObjectId=window.infoBox.sharedObjectId,sharedObject=window[sharedObjectId],_=sharedObject.i18n["_"],{Component,html,useState}=window.neverland,{useSelector,useDispatch,store}=sharedObject.store;function closePanelHandler(){const e=useDispatch();e({type:"BOT:BG_PANEL_VISIBLE",payload:!1})}function onPosChange(e,a){const t=sharedObject.bgApi,n=useDispatch();n({type:"PANEL:SET_POSITION",payload:{posX:a.posX,posY:a.posY,panelId:e}});a=store.getState().botConfig;t.setConfig(a)}function onPresetChanged(e){const a=sharedObject.bgApi;e=e.target.value;const t=useDispatch();t({type:"BG_PANEL:PRESET_CHANGED",payload:e});e=store.getState().botConfig;a.setConfig(e)}function onChangeMode(e){const a=sharedObject.bgApi;if(e.target.classList.contains("mode-selector")){e=e.target.value;const t=useDispatch();t({type:"BG_PANEL:SET_MODE",payload:e});e=store.getState().botConfig;a.setConfig(e)}}function onChangeDelay(e,a){changeProp("attackDelay",parseInt(a))}function changeProp(e,a){const t=sharedObject.bgApi,n=useDispatch();n({type:"BG_PANEL:SET_PROP",payload:{prop:e,value:a}});e=store.getState().botConfig;t.setConfig(e)}function onChangeProp(e,a){changeProp(e,parseInt(a.target.value)||0)}function turboHandler(){startHandler(!0)}function startHandler(e=!1){const a=sharedObject.commonApi,t=sharedObject.gbgApi;var n=store.getState(),o=n.botConfig?.bgPanel?.mode||"manual",l=n.botConfig.armyConfig,s=Object.keys(l)[0],i=n.botConfig?.bgPanel?.autoArmy;switch(o){case"auto":var c=n.botConfig?.bgPanel?.autoCount||0,d=n.botConfig?.bgPanel?.armyPreset||s;if(!d)return void a.dialogs.warning(_("panels.bg.preset_err"));d=l[d];t.autoBG(c,d,e,i);break;case"manual":c=n.botConfig?.bgPanel?.manualCount||1,d=n.botConfig?.bgPanel?.armyPreset||s;if(!d)return void a.dialogs.warning(_("panels.bg.preset_err"));d=l[d];t.manualBG(c,d,e,i);break;case"negotiation":c=n.botConfig?.bgPanel?.negoCount||0;t.negotiateBG(c,e)}}function stopHandler(){const e=sharedObject.gbgApi;e.stopBGAction()}function focusProvince(){const e=sharedObject.gbgApi;e.focusProvince()}function autopilotHandler(e,a){const t=sharedObject.gbgApi;t&&(e(!a),t.toggleBGAutopilot(!a))}function propBlock(e,a){return html`<div class="sector-info__prop"><span class="sector-info__title">${e}</span> <span class="sector-info__value">${a}</span></div>`}const BGPanelBody=Component(()=>{var e=useSelector(e=>e),a=e.botConfig.armyConfig;const t=e.botConfig?.bgPanel?.armyPreset;var n=e.bgPanel.status,o=n?.text||_("panels.bg.ready"),n=n?.type||"ok",l=e.botConfig?.bgPanel?.mode||"manual",s=e.botConfig?.bgPanel?.autoArmy||!1,i=e.botConfig?.bgPanel?.manualCount||1,c=e.botConfig?.bgPanel?.autoCount||0,d=e.botConfig?.bgPanel?.negoCount||0,r=e.botConfig?.bgPanel?.attackDelay||0,b=e.bgPanel.isActionRunned||!1;const[p,g]=useState(!1);var{attacks:e,provinces:u,action:m,provinceName:f,provinceUnlockTime:h,provinceRate:v}=e.autoBG,m="attack"===m?_("panels.bg.attack"):_("panels.bg.wait");let P;return P=f?html`<button class="btn-transparent" onclick=${focusProvince}>${_("panels.bg.province",f)}  ▶</button>`:html`${_("panels.bg.province",_("panels.bg.no"))}`,html`${PanelBody(html`<div class="d-flex justify-content-center p-2" style="min-width:255px">${Switch({id:"autopilot",label:_("panels.bg.autopilot"),checked:p,handler:()=>autopilotHandler(g,p)})}</div>${p?html`<div class="p-2"><div class="d-flex justify-content-between dotted-bottom"><span class="text-muted pe-1">${_("panels.bg.attks_count")}</span> <span>${e||0}</span></div><div class="d-flex justify-content-between dotted-bottom"><span class="text-muted pe-1">${_("panels.bg.sectors_count")}</span> <span>${u||0}</span></div><div class="d-flex justify-content-between dotted-bottom"><span class="text-muted pe-1">${_("panels.bg.action")}</span> <span>${m}</span></div><div class="d-flex flex-column mt-2">${Card(P,html`<div class="d-flex flex-column justify-content-start align-items-stretch">${propBlock(_("panels.bg.unlock_time"),h||"00:00:00")} ${propBlock(_("panels.bg.success_rate"),`${v||0}%`)}</div>`)}</div></div>`:html`<div class="bg-modes" onChange=${onChangeMode}><div class="form-check"><input class="form-check-input mode-selector" type="radio" id="bg-mode-manual" name="flexRadioDefault" checked=${"manual"===l} value="manual"> <label class="form-check-label" for="bg-mode-manual"><fieldset class="manual" disabled=${"manual"!==l}><legend>${_("panels.bg.manual")}</legend><label for="atk-counter">${_("panels.bg.count")}</label> <input type="number" id="atk-counter" min="0" max="500" value=${i} style="border-radius:5px" onChange=${onChangeProp.bind(null,"manualCount")}></fieldset></label></div><div class="form-check"><input class="form-check-input mode-selector" type="radio" id="bg-mode-auto" name="flexRadioDefault" value="auto" checked=${"auto"===l}> <label class="form-check-label" for="bg-mode-auto"><fieldset class="manual" disabled=${"auto"!==l}><legend>${_("panels.bg.auto")}</legend><label for="max-atks">${_("panels.bg.till_attks")}</label> <input type="number" id="max-atks" min="0" max="500" value=${c} style="border-radius:5px" onChange=${onChangeProp.bind(null,"autoCount")}></fieldset></label></div><div class="form-check"><input class="form-check-input mode-selector" type="radio" id="bg-mode-negotiation" name="flexRadioDefault" value="negotiation" checked=${"negotiation"===l}> <label class="form-check-label" for="bg-mode-negotiation"><fieldset class="manual" disabled=${"negotiation"!==l}><legend>${_("panels.bg.nego")}</legend><label for="max-atks2">${_("panels.bg.till_attks")}</label> <input type="number" id="max-atks2" min="0" max="500" value=${d} style="border-radius:5px" onChange=${onChangeProp.bind(null,"negoCount")}></fieldset></label></div></div><div class="bg-controls"><span class="mb-0">${_("main_window.tabs.bg.delay")}</span> ${Range({id:"bg-delay",label:"",min:0,max:1500,default:500,value:r,colored:!0,showLimits:!0,change:onChangeDelay})} ${Switch({id:"autoArmy",label:_("panels.bg.auto_army"),checked:s,handler:changeProp})}<div class="army-preset"><span class="control-label">${_("panels.bg.preset")}</span> <select class="form-control" value=${t} onChange=${onPresetChanged}>${Object.keys(a).map(e=>html`<option value=${e} selected=${e===t}>${e}</option>`)}</select></div><div class="d-flex"><button class="btn btn-primary flex-grow-1 me-1" disabled=${p||b} onclick=${()=>{startHandler()}}>${_("panels.bg.start")}</button> <button class="btn btn-danger flex-grow-1" disabled=${p||b} onclick=${turboHandler}>${_("panels.bg.turbo")}</button></div><button class="btn btn-info" disabled=${p||!b} onclick=${stopHandler}>${_("panels.bg.stop")}</button></div>`} ${StatusPanel({type:n,text:o,label:_("status")})}`)}`}),BGPanel=Component(()=>{var e=useSelector(e=>e),a=e.bgPanel["visible"],{posX:t,posY:n}=e.botConfig.bgPanel,{isScriptInited:e,isActive:o}=e.status;return e&&o&&a?html`${Panel({id:"bgPanel",panelId:"bgPanel",visible:a,header:PanelHeader({onPosChange:onPosChange.bind(null,"bgPanel"),closable:!0,title:"BG",closeHandler:closePanelHandler}),body:BGPanelBody(),position:{posX:t,posY:n}})}`:""});export default BGPanel;