const sharedObjectId=window.infoBox.sharedObjectId,sharedObject=window[sharedObjectId],_=sharedObject.i18n["_"],{Component,html}=window.neverland,{store,useDispatch,useSelector}=sharedObject.store;import{Switch,Card,LabeledInput,Range}from"../components/index.js";function onPresetChanged(t){const a=sharedObject.bgApi;t=t.target.value;const e=useDispatch();e({type:"BGAUTO:PRESET_CHANGED",payload:t});t=store.getState().botConfig;a.setConfig(t)}const paramsMap={"attriction-counter":"maxAttriction","chance-counter":"successRate","max-attks":"maxAttacks","attk-timeout":"attackTimeout",BGautoArmy:"autoArmy",BGAutoBottles:"autoBottles",BGbySignals:"bySignals","auto-bg-delay":"attackDelay"};async function onChangeProp(t,a){const e=useDispatch();t=paramsMap[t],t={type:"BGAUTO:SETTINGS_UPDATED",payload:{[t]:a="autoArmy"!==t&&"autoBottles"!==t&&"bySignals"!==t&&(a=parseInt(a)||0)<0?0:a}};e(t),saveConfig(),applySettings()}function applySettings(){const t=sharedObject.gbgApi;var a,e,n,o,i;t&&(i=store.getState()["botConfig"],a=(i=i.autoBG).maxAttacks||0,e=i.attackTimeout||0,n=i.maxAttriction||0,o=i.successRate||0,i=i.bySignals||!1,t.updateBGAutopilotConfig(n,o,a,e,i))}async function saveConfig(t=!1){const a=sharedObject.bgApi;var e=store.getState()["botConfig"];await a.setConfig(e,t)}const BGTab=Component(()=>{var t=useSelector(t=>t.botConfig),a=t.autoBG,t=t.armyConfig;const e=a.armyPreset;var n=a.autoArmy||!1,o=a.autoBottles||!1,i=a.bySignals||!1,s=a.maxAttriction||0,l=a.successRate||0,c=a.maxAttacks||0,r=a.attackTimeout||0,a=a.attackDelay;return html`<div class="tab-pane fade" id="bg" role="tabpanel" aria-labelledby="bg-tab">${Card(_("main_window.tabs.bg.title1"),html`<div class="container"><div class="row"><div class="col p-1 d-flex flex-column align-items-stretch">${LabeledInput({type:"number",id:"attriction-counter",label:_("main_window.tabs.bg.max-attr"),value:s,placeholder:_("main_window.tabs.bg.max-attr"),min:0,max:500,input:onChangeProp})} ${LabeledInput({type:"number",id:"chance-counter",label:_("main_window.tabs.bg.chance"),value:l,placeholder:_("main_window.tabs.bg.chance"),min:0,max:500,input:onChangeProp})} ${LabeledInput({type:"number",id:"max-attks",label:_("main_window.tabs.bg.max-attk"),value:c,placeholder:_("main_window.tabs.bg.max-attk"),min:0,max:500,input:onChangeProp})} <span class="mt-1">${_("main_window.tabs.bg.delay")}</span> ${Range({id:"auto-bg-delay",label:"",min:0,max:1500,default:500,value:a,colored:!0,showLimits:!0,change:onChangeProp})}</div><div class="col-1"></div><div class="col p-1 d-flex flex-column align-items-stretch justify-content-start">${Switch({id:"BGAutoBottles",label:_("main_window.tabs.bg.auto-bottle"),checked:o,handler:onChangeProp})} ${Switch({id:"BGautoArmy",label:_("main_window.tabs.bg.auto-army"),checked:n,handler:onChangeProp})} ${Switch({id:"BGbySignals",label:_("main_window.tabs.bg.attack-by-signal"),checked:i,handler:onChangeProp})}<div class="army-preset"><span class="control-label">${_("main_window.tabs.bg.preset")}</span> <select class="form-control" value=${e} onChange=${onPresetChanged}>${Object.keys(t).map(t=>html`<option value=${t} selected=${t===e}>${t}</option>`)}</select></div>${LabeledInput({type:"number",id:"attk-timeout",label:_("main_window.tabs.bg.timeout"),value:r,placeholder:_("main_window.tabs.bg.timeout"),min:0,max:180,input:onChangeProp})}</div></div></div>`)}</div>`});export default BGTab;